#define RCC_2 (*(volatile unsigned *)  0x40021018)
#define BUTTON (*(volatile unsigned *) 0x40011404)

#include "misc.h"
#include "stm32f10x.h"
#include "stm32f10x_exti.h"
#include "stm32f10x_gpio.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_usart.h"

static char chat_str[50];
static int str_length;

static GPIO_InitTypeDef GPIO_InitStructure;

static GPIO_InitTypeDef GPIO_IS1;
static GPIO_InitTypeDef GPIO_IS2;
static GPIO_InitTypeDef GPIO_IS3;
static GPIO_InitTypeDef GPIO_IS4;

static GPIO_InitTypeDef GPIO_BUTTON_1_structure;
static NVIC_InitTypeDef NVIC_InitStructure;
static EXTI_InitTypeDef EXTI_InitStructure;

static USART_InitTypeDef usart1_init_struct;
static GPIO_InitTypeDef gpioa_init_struct;


void Delay(int x);
void waveLed(void);
void flickeringLed(void);
void Send_chatstr(void);
void Send_String(void);

void SysInit(void);
void SetSysClock(void);

void USART1_Init(void);
void BUTTON_interrupt_Setting(void);
void Bluetooth_USART2_Init(void);
void EXTI15_10_IRQHandler(void);
void USART1_IRQHandler(void);
void USART2_IRQHandler(void);

void str_chatting_init(void);


void Delay(int x){
	int i = 0;
	for( i = 0 ; i < x * 100 ; i++){}
}


void Send_String(void){
	char buf[] = "WED_team7_UART_TEST";
	int i=0;
	while(1){
		if(buf[i] == '\0') break;

		while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET) {}
		USART_SendData(USART1, buf[i]);
		i++;
	}
}

void Send_chatstr(void){
	int i=0;
	while(1){
		if(chat_str[i] == '0') {
			while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET) {}
			USART_SendData(USART1, '\n');
			break;
		}
		if(i>=50) break;

		while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET) {}
		USART_SendData(USART1, chat_str[i]);
		i++;
	}
}
void str_chatting_init(void){
	int i = 0;
	str_length = 0;
	for(i = 0 ; i < 50 ; i ++){
		chat_str[i] = ' ';
	}
}
void flickeringLed(void){

	GPIO_SetBits(GPIOD,GPIO_Pin_2);
	GPIO_SetBits(GPIOD,GPIO_Pin_3);
	GPIO_SetBits(GPIOD,GPIO_Pin_4);
	GPIO_SetBits(GPIOD,GPIO_Pin_7);
	Delay(6000);

	GPIO_ResetBits(GPIOD,GPIO_Pin_2);
	GPIO_ResetBits(GPIOD,GPIO_Pin_3);
	GPIO_ResetBits(GPIOD,GPIO_Pin_4);
	GPIO_ResetBits(GPIOD,GPIO_Pin_7);
	Delay(6000);
}
void waveLed(void){
	GPIO_SetBits(GPIOD,GPIO_Pin_2);
	Delay(3000);
	GPIO_ResetBits(GPIOD,GPIO_Pin_2);

	GPIO_SetBits(GPIOD,GPIO_Pin_3);
	Delay(3000);
	GPIO_ResetBits(GPIOD,GPIO_Pin_3);

	GPIO_SetBits(GPIOD,GPIO_Pin_4);
	Delay(3000);
	GPIO_ResetBits(GPIOD,GPIO_Pin_4);

	GPIO_SetBits(GPIOD,GPIO_Pin_7);
	Delay(3000);
	GPIO_ResetBits(GPIOD,GPIO_Pin_7);
}

void SysInit(void) {
	/* Set HSION bit */
	/* Internal Clock Enable */
	RCC->CR |= (uint32_t) 0x00000001;


	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
	RCC->CFGR &= (uint32_t) 0xF0FF0000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;

	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
	RCC->CFGR &= (uint32_t) 0xFF80FFFF;

	/* Reset PLL2ON and PLL3ON bits */
	RCC->CR &= (uint32_t) 0xEBFFFFFF;

	/* Disable all interrupts and clear pending bits  */
	RCC->CIR = 0x00FF0000;

	/* Reset CFGR2 register */
	RCC->CFGR2 = 0x00000000;
}

void SetSysClock(void)
{
	volatile uint32_t StartUpCounter = 0, HSEStatus = 0;

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;

    /* Flash 0 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;

    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV2;

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;

    /* Configure PLLs ------------------------------------------------------*/
    /* PLL configuration: PLLCLK = 40 */
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL5);

    /* PLL2 configuration: PLL2CLK = 40 */
    /* PREDIV1 configuration: PREDIV1CLK = ???? */
    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
                              RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
                             RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);

    /* Enable PLL2 */
    RCC->CR |= RCC_CR_PLL2ON;
    /* Wait till PLL2 is ready */
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
    {
    }
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}

void USART1_Init(void) {
	//RCC -> APB2ENR |= (uint32_t)RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN  | RCC_APB2ENR_IOPDEN;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA, ENABLE);

	gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
	gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
	gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOA, &gpioa_init_struct);

	gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
	gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
	gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &gpioa_init_struct);

	USART_Cmd(USART1, ENABLE);
	usart1_init_struct.USART_BaudRate = 9600;
	usart1_init_struct.USART_WordLength = USART_WordLength_8b;
	usart1_init_struct.USART_StopBits = USART_StopBits_1;
	usart1_init_struct.USART_Parity = USART_Parity_No;
	usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_Init(USART1, &usart1_init_struct);
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
	NVIC_EnableIRQ(USART1_IRQn);
}


void BUTTON_interrupt_Setting(void){
	//AFIO->EXTICR[3] |= AFIO_EXTICR3_EXTI11_PD;
	RCC_APB2PeriphClockCmd(RCC_APB2ENR_IOPDEN, ENABLE);

	//LED GPIO SETTING
	GPIO_IS1.GPIO_Pin = GPIO_Pin_2;
	GPIO_IS1.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_IS1.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOD, &GPIO_IS1);

	GPIO_IS2.GPIO_Pin = GPIO_Pin_3;
	GPIO_IS2.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_IS2.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOD, &GPIO_IS2);

	GPIO_IS3.GPIO_Pin = GPIO_Pin_4;
	GPIO_IS3.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_IS3.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOD, &GPIO_IS3);

	GPIO_IS4.GPIO_Pin = GPIO_Pin_7;
	GPIO_IS4.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_IS4.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOD, &GPIO_IS4);

	//BUTTON GPIO SETTING
	GPIO_BUTTON_1_structure.GPIO_Pin = GPIO_Pin_11;
	GPIO_BUTTON_1_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_BUTTON_1_structure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOD, &GPIO_BUTTON_1_structure);

	GPIO_BUTTON_1_structure.GPIO_Pin = GPIO_Pin_12;
	GPIO_BUTTON_1_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_BUTTON_1_structure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOD, &GPIO_BUTTON_1_structure);



	//NVIC SETTING
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);

	NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

	NVIC_Init(&NVIC_InitStructure);

	//EXTI SETTING
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO, ENABLE);

	GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource11);
	EXTI_InitStructure.EXTI_Line = EXTI_Line11;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);

	GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource12);
	EXTI_InitStructure.EXTI_Line = EXTI_Line12;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);

}

void Bluetooth_USART2_Init(void){
	GPIO_InitTypeDef bluetooth_gpioa_init_struct;
	NVIC_InitTypeDef bluetooth_NVIC_InitStructure;
	USART_InitTypeDef bluetooth_usart2_init_struct;

	//CLOCK 설정
	//USART2는 RCC를 ABP1을 사용
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);


	//TX RX의 핀 설정
	//PA2 = TX, PA3 = RX (TX 보내는거, RX 받는거)
	bluetooth_gpioa_init_struct.GPIO_Pin = GPIO_Pin_2;
	bluetooth_gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
	bluetooth_gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOA, &bluetooth_gpioa_init_struct);

	bluetooth_gpioa_init_struct.GPIO_Pin = GPIO_Pin_3;
	bluetooth_gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
	bluetooth_gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &bluetooth_gpioa_init_struct);


	//USART2 설정
	bluetooth_usart2_init_struct.USART_BaudRate = 9600;
	bluetooth_usart2_init_struct.USART_WordLength = USART_WordLength_8b;
	bluetooth_usart2_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	bluetooth_usart2_init_struct.USART_Parity = USART_Parity_No;
	bluetooth_usart2_init_struct.USART_StopBits = USART_StopBits_1;
	bluetooth_usart2_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;

	USART_Init(USART2, &bluetooth_usart2_init_struct);
	USART_Cmd(USART2, ENABLE);
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);

	//인터럽트 설정
	bluetooth_NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
	bluetooth_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
	bluetooth_NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
	bluetooth_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&bluetooth_NVIC_InitStructure);

}
void EXTI15_10_IRQHandler(void) //10.11.12.
{
	if(EXTI_GetITStatus(EXTI_Line12) != RESET){
	    //SendDataMain();
	    Send_String();
	    EXTI_ClearITPendingBit(EXTI_Line12);
    }
	if(EXTI_GetITStatus(EXTI_Line11) != RESET) {
		//동작수행구문
	    waveLed();
	    EXTI_ClearITPendingBit(EXTI_Line11);
    }
}
void USART1_IRQHandler(void) {
    char buf;
    while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET) {}

    //USART1에서 받은 데이터를 USART2로 전송
    buf = (char) USART_ReceiveData(USART1);
    USART_SendData(USART2, buf);
    USART_ClearITPendingBit(USART1, USART_IT_RXNE);
}
void USART2_IRQHandler(void) {
	char data;
	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET) {}

    //USART2에서 받은 데이터를 USART1로 전송
	data = (char) USART_ReceiveData(USART2);
	USART_SendData(USART1, data);

	USART_ClearITPendingBit(USART2, USART_IT_RXNE);

}
int main() {
	//str_chatting_init();

	USART1_Init();
	BUTTON_interrupt_Setting();
	Bluetooth_USART2_Init();

	while(1) {}
}
