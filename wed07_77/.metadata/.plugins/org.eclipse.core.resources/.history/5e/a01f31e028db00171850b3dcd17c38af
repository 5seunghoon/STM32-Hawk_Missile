#include <stm32f10x.h>

#include <stm32f10x_gpio.h>
#include <stm32f10x_rcc.h>
#include <stm32f10x_usart.h>
#include <stm32f10x_exti.h>
#include "stm32f10x_adc.h"
#include "stm32f10x_dma.h"
#include <stm32f10x_tim.h>
#include "misc.h"
#include "lcd.h"
#include <math.h>
#include <stm32f10x_usart.h>

/*
 flash load "C:\Users\hw_3\Desktop\term\term\flashclear.axf"
 flash load "C:\Users\hw_3\Desktop\term\term\Debug\term.axf"
 */
DMA_InitTypeDef DMA_InitStructure;
ADC_InitTypeDef ADC_InitStructure;
TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
NVIC_InitTypeDef NVIC_InitStructure;
GPIO_InitTypeDef GPIO_InitStructure;
EXTI_InitTypeDef EXTI_InitStructure;

NVIC_InitTypeDef nvic;
GPIO_InitTypeDef usart_tx;
GPIO_InitTypeDef usart_rx;
USART_InitTypeDef usart;

char bluedata;

//===============================================================
//		피에조 모듈
//===============================================================
enum scale {
	C3,
	C3s,
	D3,
	D3s,
	E3,
	F3,
	F3s,
	G3,
	G3s,
	A4,
	A4s,
	B4,
	C4,
	C4s,
	D4,
	D4s,
	E4,
	F4,
	F4s,
	G4,
	G4s,
	A5,
	A5s,
	B5
};

typedef struct Makesound {
	int prescalar;
	int period;
} makesound;

makesound makescale[24];

void usart1_send_string(char* data) {
	while (*data != '\0') {
		USART_SendData(USART1, *(unsigned char *) data);
		while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)
			;
		data++;
	}
}

int a = 0;
int vol = 2;
int octav = 4;
char strarray;
int strlength = 0;
int octav_change = 0;
int volume_base = 1;
void USART1_IRQHandler(void) {
	char RxBuffer;

	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
		RxBuffer = USART_ReceiveData(USART1) & 0xFF;
		//USART_SendData(USART1, RxBuffer);
		//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET );
		USART_SendData(USART2, RxBuffer);
		USART_ClearITPendingBit(USART1, USART_IT_RXNE);
	}

}

void USART2_IRQHandler(void) {


	if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
		strarray = USART_ReceiveData(USART2) & 0xFF;

		if (strarray == 'l') {
			octav = 4;
			octav_change++;
		} else if (strarray == 'h') {
			octav = 5;
			octav_change++;
		} else if (strarray == 'b') {
			volume_base = 1;
		} else if (strarray == 's') {
			volume_base = 0;
		}

		//USART_SndData(USART2, RxBuffer);
		//while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET );
		USART_SendData(USART1, strarray);
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
	}

}

void NVIC_Configu() {
	nvic.NVIC_IRQChannel = USART1_IRQn;
	nvic.NVIC_IRQChannelPreemptionPriority = 0;
	nvic.NVIC_IRQChannelSubPriority = 0;
	nvic.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvic);

	nvic.NVIC_IRQChannel = USART2_IRQn;
	nvic.NVIC_IRQChannelPreemptionPriority = 0;
	nvic.NVIC_IRQChannelSubPriority = 0;
	nvic.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvic);

}

void Init_Scale() {
	int i;

	for (i = 0; i < 12; i++) {
		makescale[i].prescalar = 80 / (pow(2, octav - 1));
		makescale[i].period = 900000 / 55.0 / pow(2.0, (i - 9.0) / 12.0);
	}
	for (i = 12; i < 24; i++) {
		int j = i - 12;
		makescale[i].prescalar = 80 / (pow(2, octav - 1));
		makescale[i].period = 900000 / 55.0 / pow(2.0, (j - 9.0) / 12.0);
	}
}

void ADC_Configu() {

	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
	ADC_InitStructure.ADC_NbrOfChannel = 4;

	ADC_Init(ADC1, &ADC_InitStructure);

	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_55Cycles5);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 2, ADC_SampleTime_55Cycles5);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 3, ADC_SampleTime_55Cycles5);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 4, ADC_SampleTime_55Cycles5);
	ADC_Cmd(ADC1, ENABLE);
	ADC_DMACmd(ADC1, ENABLE);

	ADC_ResetCalibration(ADC1);
	while (ADC_GetResetCalibrationStatus(ADC1))
		;
	ADC_StartCalibration(ADC1);
	while (ADC_GetCalibrationStatus(ADC1))
		;
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);

}

void GPIO_Configu() {

	//=============================================
	//		ADC12_IN1, ADC12_IN6
	//=============================================
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_6;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
	//=============================================
	//		 ADC12_IN9
	//=============================================
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	//=============================================
	//		 ADC12_IN11
	//=============================================
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
}

void GPIO_Configuration() {

	GPIO_InitTypeDef GPIO_InitStructure;
//==============================================
//		PB0, 6 pwm
//==============================================
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_0;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
//==============================================
//		PA8	pwm
//==============================================
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

}

uint16_t CCR_Val[4] = { 125, 250, 375, 500 };
void Tim_config(int note, int volume) {
//==================================================================
//			TIM4 CH1
//==================================================================
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_TimeBaseStructure.TIM_Period = makescale[note].period - 1;
	TIM_TimeBaseStructure.TIM_Prescaler = makescale[note].prescalar - 1;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = CCR_Val[volume];
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OC1Init(TIM4, &TIM_OCInitStructure);
	TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
	TIM_ARRPreloadConfig(TIM4, ENABLE);
	/* TIM4 enable counter */
	TIM_Cmd(TIM4, ENABLE);

}
void Tim_config2(int note, int volume) {
	//==================================================================
	//			TIM1 CH1
	//==================================================================
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_TimeBaseStructure.TIM_Period = makescale[note].period*2 - 1;
	TIM_TimeBaseStructure.TIM_Prescaler = makescale[note].prescalar - 1;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = CCR_Val[volume];
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
	TIM_ARRPreloadConfig(TIM1, ENABLE);
	/* TIM4 enable counter */
	TIM_Cmd(TIM1, ENABLE);
	TIM_CtrlPWMOutputs(TIM1, ENABLE);

}
void Tim_config3(int note, int volume) {
//==================================================================
//			TIM3 CH2
//==================================================================
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_TimeBaseStructure.TIM_Period = makescale[note].period - 1;
	TIM_TimeBaseStructure.TIM_Prescaler = makescale[note].prescalar - 1;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = CCR_Val[volume];
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OC3Init(TIM3, &TIM_OCInitStructure);				//OC2 = Channel 2
	TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Enable);
	TIM_ARRPreloadConfig(TIM3, ENABLE);
	/* TIM3 enable counter */
	TIM_Cmd(TIM3, ENABLE);

}
void RCC_Configu() {
	RCC_APB2PeriphClockCmd(
			RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOB
					| RCC_APB2Periph_GPIOD | RCC_APB2Periph_ADC1|RCC_APB2Periph_TIM1
					| RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO, ENABLE);
	RCC_APB1PeriphClockCmd(
			RCC_APB1Periph_TIM4 | RCC_APB1Periph_TIM3
					| RCC_APB1Periph_USART2, ENABLE);
	RCC_ClockSecuritySystemCmd(ENABLE);

}

////////////////////////////////////////////////////////////////////////////////
//		초음파센서 모듈
//================================================================================
void Delay_ms(uint32_t ms)

{
	volatile uint32_t nCount;
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	nCount = (RCC_Clocks.HCLK_Frequency / 10000) * ms;
	for (; nCount != 0; nCount--)
		;
}

void init_ports() {
	//PE13 - Trig for HC-SR04
	//===================================================================
	//			PORT for HC-SR04 trig
	//===================================================================
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_14
			| GPIO_Pin_15;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	//===================================================================
	//			PORT for HC-SR04 echo
	//===================================================================
	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_12 | GPIO_Pin_11
			| GPIO_Pin_13;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
}

void init_interrupts()

{
	//========================================================================
	//							TIMER SETTING
	//========================================================================

	//========================================================================
	//			TIMER SETTING 7 - COUNTER TO EVALUATE THE DISTANCE
	//========================================================================
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
	NVIC_InitStructure.NVIC_IRQChannel = TIM7_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	TIM_TimeBaseStructure.TIM_Prescaler = 36 - 1;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = 60000 - 1; //동작한계 60ms (38ms)
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0; // 의미 없음.
	TIM_TimeBaseInit(TIM7, &TIM_TimeBaseStructure);
	TIM_ITConfig(TIM7, TIM_IT_Update, ENABLE);
	TIM_Cmd(TIM7, ENABLE);

	//===================================================================
	//					EXTI SETTING
	//===================================================================
	//===================================================================
	//			EXTI12 - HC-SR04 Echo
	//===================================================================
	RCC_APB2PeriphClockCmd(RCC_APB2ENR_AFIOEN, ENABLE);

	//EXTI->IMR |= EXTI_IMR_MR12;
	//EXTI->RTSR |= EXTI_RTSR_TR12;
	EXTI_InitStructure.EXTI_Line = EXTI_Line10 | EXTI_Line11 | EXTI_Line12
			| EXTI_Line13;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_Init(&EXTI_InitStructure);

	//NVIC_SetPriority(EXTI15_10_IRQn, 1);
	//NVIC_EnableIRQ(EXTI15_10_IRQn);
	NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource10);
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource11);
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource12);
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource13);

}

uint32_t ARRAY[4];

void DMA_Configu() {
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
	DMA_DeInit(DMA1_Channel1);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &ADC1->DR;
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) ARRAY;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
	DMA_InitStructure.DMA_BufferSize = 4;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word; // 32bit
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word; // 32bit
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
	DMA_Init(DMA1_Channel1, &DMA_InitStructure);

	// Enable DMA1 Channel1
	DMA_Cmd(DMA1_Channel1, ENABLE);
}

void playmusic1(uint16_t x, int volume) {
	if (500 < x && x < 6000) {
		x = x / 800;
		Tim_config(x, volume);
	} else {
		//x = 0;
	}

}
void playmusic2(uint16_t x, int volume) {
	if (500 < x && x < 6000) {
		x = x / 800;
		Tim_config2(x, volume);
	} else {
		//x = 0;
	}

}
void playmusic3(uint16_t x, int volume) {
	if (500 < x && x < 6000) {
		x = x / 800;
		Tim_config3(x, volume);
	} else {
		//x = 0;
	}

}

void UART_GPIO_Configu() {
	usart_tx.GPIO_Pin = GPIO_Pin_9;
	usart_tx.GPIO_Mode = GPIO_Mode_AF_PP;
	usart_tx.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &usart_tx);

	usart_rx.GPIO_Pin = GPIO_Pin_10;
	usart_rx.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &usart_rx);

	usart_tx.GPIO_Pin = GPIO_Pin_2;
	usart_tx.GPIO_Mode = GPIO_Mode_AF_PP;
	usart_tx.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &usart_tx);

	usart_rx.GPIO_Pin = GPIO_Pin_3;
	usart_rx.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &usart_rx);
}

void USART_Configu() {
	usart.USART_BaudRate = 9600;
	usart.USART_WordLength = USART_WordLength_8b;
	usart.USART_StopBits = USART_StopBits_1;
	usart.USART_Parity = USART_Parity_No;
	usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_Init(USART1, &usart);
	USART_Cmd(USART1, ENABLE);

	usart.USART_BaudRate = 9600;
	usart.USART_WordLength = USART_WordLength_8b;
	usart.USART_StopBits = USART_StopBits_1;
	usart.USART_Parity = USART_Parity_No;
	usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_Init(USART2, &usart);
	USART_Cmd(USART2, ENABLE);
}

//DEBUG VALUE
int debug_exti = 0;
int debug_count = 0;
int debug_tim = 0;

//
uint8_t catcher_status[4] = { 0, 0, 0, 0 };
uint8_t trigger[4] = { 0, 0, 0, 0 };
uint8_t triggerflag[4] = { 0, 0, 0, 0 };
uint16_t duration[4] = { 0, 0, 0, 0 };
uint8_t sonicwave_flag = 0;

uint16_t duration_cnt[4] = { 0, 0, 0, 0 };
uint16_t duration_cnt_flag[4] = { 0, 0, 0, 0 };

int main(void) {
	int note[4] = { 1000, 2500, 4000, 1000 };
	int power[4] = {0,0,0,0};
	//--초음파모듈 초기화
	int i = 0; //counter
	int volume[4] = { 0, };
	 //1,2
	int volume_ctrl; //1,2
	int sound_cnt[4];
	RCC_Configu();
	USART_Configu();
	init_ports();  // 초음파용 포트
	GPIO_Configuration();  // 피에조용 포트
	GPIO_Configu();  // ㅍ조도센서용 포트
	UART_GPIO_Configu(); // 통신 포트
	ADC_Configu(); // 조도센서용
	DMA_Configu(); // 조도센서용

	LCD_Init();
	LCD_Clear(WHITE);

	init_interrupts();
	NVIC_Configu();
	//--피에조모듈 초기화

	Init_Scale();
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
	// Запускаем таймер 7 первый раз на отсчёт 10 мс
	while (1) {
		if (octav_change == 1) {
			Init_Scale();
			octav_change = 0;
		}
		//==DEBUG================================================//
		debug_count++;
		//LCD_ShowNum(100, 20, sonicwave_flag, 7, BLACK, WHITE);
		//LCD_ShowNum(100, 40, debug_tim, 7, BLACK, WHITE);
		//LCD_ShowNum(100, 60, debug_exti, 7, BLACK, WHITE);
		//LCD_ShowNum(100, 80, debug_tim2, 7, BLACK, WHITE);
		//LCD_ShowNum(100, 100, debug_count, 7, BLACK, WHITE);
		//LCD_ShowNum(100, 120, debug_tim2, 7, BLACK, WHITE);
		//================================================//
		for(int i=0;i<4;i++){
		note[i] = duration[i];
		power[i] = ARRAY[i];
		}
		power[0] *=31;
		LCD_ShowNum(20, 40, note[0], 7, BLACK, WHITE);
		 LCD_ShowNum(20, 60, note[1], 7, BLACK, WHITE);
		 LCD_ShowNum(20, 80, note[2], 7, BLACK, WHITE);
		 LCD_ShowNum(20, 100, note[3], 7, BLACK, WHITE);

		 LCD_ShowNum(100, 20, power[0], 4, BLACK, WHITE);
		 LCD_ShowNum(100, 40, power[1], 4, BLACK, WHITE);
		 LCD_ShowNum(100, 60, power[2], 4, BLACK, WHITE);
		 LCD_ShowNum(100, 80, power[3], 4, BLACK, WHITE);

		 //LCD_ShowNum(200, 150, strarray, 1, BLACK, WHITE);

		 LCD_ShowNum(200, 20, octav, 4, BLACK, WHITE);
		 LCD_ShowNum(200, 40, vol, 4, BLACK, WHITE);

		//===============================================
		//		연주시작
		//==============================================


		for (i = 0; i < 4; i++) {
			if(power[i]>1500) {
				volume_ctrl=2;
			}
			else {
				volume_ctrl=0;
			}
			volume[i] = volume_base + volume_ctrl;
		}

		if (power[0] < 1000 && power[3] < 1000) {
			//
			if (sound_cnt[0] > 100) {
				sound_cnt[0] = 0;
				TIM_Cmd(TIM3, DISABLE);
			}
			if (sound_cnt[3] > 100) {
				sound_cnt[3] = 0;
				TIM_Cmd(TIM3, DISABLE);
			}
			//sound_cnt[0]=0;
			//sound_cnt[3]=0;
		} else if (power[0] >= 500) {
			//TIM_Cmd(TIM3, ENABLE);
			playmusic3(D3+note[0],volume[0]);
			sound_cnt[0]++;
		} else if (power[3] >= 500) {
			//TIM_Cmd(TIM3, ENABLE);
			playmusic3(E4+note[3],volume[3]);
			sound_cnt[3]++;
		}

		if (power[1] < 500) {
			if (sound_cnt[1] > 100) {
				sound_cnt[1] = 0;
				TIM_Cmd(TIM4, DISABLE);
			}
		} else {
			//TIM_Cmd(TIM4, ENABLE);
			playmusic1(G3+note[1],volume[1]);
			sound_cnt[1]++;
		}

		if (power[2] < 500) {
			if (sound_cnt[2] > 100) {
				sound_cnt[2] = 0;
				TIM_Cmd(TIM1, DISABLE);
			}
		} else {
			//TIM_Cmd(TIM1, ENABLE);
			playmusic2(B4+note[2],volume[2]);
			sound_cnt[2]++;
		}
		for (i = 0; i < 4; i++) {
			if (sound_cnt[i] > 0) {
				sound_cnt[i]++;
			}
		}

		//===============================================
		//	trig control
		//===============================================
		if (triggerflag[2] != 0) {
			trigger[2]++;
		}
		if (trigger[2] > 1) {
			GPIOB->ODR &= ~GPIO_Pin_9;      // Останавливаем сигнальный импульс
			triggerflag[2] = 0;
			trigger[2] = 0;
		}

		if (triggerflag[0] != 0) {
			trigger[0]++;
		}
		if (trigger[0] > 1) {
			GPIOB->ODR &= ~GPIO_Pin_8;
			triggerflag[0] = 0;
			trigger[0] = 0;
		}

		if (triggerflag[1] != 0) {
			trigger[1]++;
		}
		if (trigger[1] > 1) {
			GPIOB->ODR &= ~GPIO_Pin_14;
			triggerflag[1] = 0;
			trigger[1] = 0;
		}

		if (triggerflag[3] != 0) {
			trigger[3]++;
		}
		if (trigger[3] > 1) {
			GPIOB->ODR &= ~GPIO_Pin_15;
			triggerflag[3] = 0;
			trigger[3] = 0;
		}

	}

}

//============================================================
//			EXTI INTERRUPT HANDLER
//============================================================

void EXTI15_10_IRQHandler(void)	//echo
{
	debug_exti++;
	if (EXTI_GetITStatus(EXTI_Line12) != RESET) {
		EXTI_ClearITPendingBit(EXTI_Line12);
		if (!catcher_status[2]) {
			TIM7->CR1 |= TIM_CR1_CEN;
			catcher_status[2] = 1;
			EXTI->RTSR &= ~EXTI_RTSR_TR12;
			EXTI->FTSR |= EXTI_FTSR_TR12;
		} else {
			TIM7->CR1 &= ~TIM_CR1_CEN;
			duration[2] = TIM7->CNT;
			//TIM7->CNT = 1;			//안정적인 운영을 위해 최소 60ms 주기를 준다.
			catcher_status[2] = 0;
			EXTI->FTSR &= ~EXTI_FTSR_TR12;
			EXTI->RTSR |= EXTI_RTSR_TR12;
			TIM7->CR1 |= TIM_CR1_CEN;

		}

	}
	if (EXTI_GetITStatus(EXTI_Line10) != RESET) {
		EXTI_ClearITPendingBit(EXTI_Line10);
		if (!catcher_status[0]) {
			TIM7->CR1 |= TIM_CR1_CEN;
			catcher_status[0] = 1;
			EXTI->RTSR &= ~EXTI_RTSR_TR10;
			EXTI->FTSR |= EXTI_FTSR_TR10;
		} else {
			TIM7->CR1 &= ~TIM_CR1_CEN;
			duration[0] = TIM7->CNT;
			//TIM7->CNT = 1;			//안정적인 운영을 위해 최소 60ms 주기를 준다.
			catcher_status[0] = 0;
			EXTI->FTSR &= ~EXTI_FTSR_TR10;
			EXTI->RTSR |= EXTI_RTSR_TR10;
			TIM7->CR1 |= TIM_CR1_CEN;

		}

	}

	if (EXTI_GetITStatus(EXTI_Line11) != RESET) {
		EXTI_ClearITPendingBit(EXTI_Line11);
		if (!catcher_status[1]) {
			TIM7->CR1 |= TIM_CR1_CEN;
			catcher_status[1] = 1;
			EXTI->RTSR &= ~EXTI_RTSR_TR11;
			EXTI->FTSR |= EXTI_FTSR_TR11;	//완벽해
		} else {
			TIM7->CR1 &= ~TIM_CR1_CEN;
			duration[1] = TIM7->CNT;
			//TIM7->CNT = 1;
			catcher_status[1] = 0;
			EXTI->FTSR &= ~EXTI_FTSR_TR11;
			EXTI->RTSR |= EXTI_RTSR_TR11;
			TIM7->CR1 |= TIM_CR1_CEN;

		}

	}
	if (EXTI_GetITStatus(EXTI_Line13) != RESET) {
		EXTI_ClearITPendingBit(EXTI_Line13);
		if (!catcher_status[3]) {
			TIM7->CR1 |= TIM_CR1_CEN;
			catcher_status[3] = 1;
			EXTI->RTSR &= ~EXTI_RTSR_TR13;
			EXTI->FTSR |= EXTI_FTSR_TR13;	//완벽해
		} else {
			TIM7->CR1 &= ~TIM_CR1_CEN;
			duration[3] = TIM7->CNT;
			//TIM7->CNT = 1;
			catcher_status[3] = 0;
			EXTI->FTSR &= ~EXTI_FTSR_TR13;
			EXTI->RTSR |= EXTI_RTSR_TR13;
			TIM7->CR1 |= TIM_CR1_CEN;

		}

	}

}
//===========================================================
//			TIMER INTERRUPT HANDLER
//===========================================================

/*void TIM6_IRQHandler(void) {
 // TIM6 이벤트 호출.
 if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET) {
 GPIOB->ODR |= GPIO_Pin_8;
 triggerflag[0]++;
 TIM6->CR1 &= ~TIM_CR1_CEN;
 //echo가 동작한계를 넘어설 때까지 도착하지 않으면 ...
 catcher_status[0] = 0;
 EXTI->FTSR &= ~EXTI_FTSR_TR10;
 EXTI->RTSR |= EXTI_RTSR_TR10;
 TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 }
 }*/
void TIM7_IRQHandler(void) {
// TIM7 이벤트 호출.
	debug_tim++;
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET) {
		if (sonicwave_flag == 2) {
			GPIOB->ODR |= GPIO_Pin_9;
			triggerflag[2]++;
			TIM7->CR1 &= ~TIM_CR1_CEN;
			//echo가 동작한계를 넘어설 때까지 도착하지 않으면 ...
			catcher_status[2] = 0;
			EXTI->FTSR &= ~EXTI_FTSR_TR12;
			EXTI->RTSR |= EXTI_RTSR_TR12;
			sonicwave_flag = 3;	//3
		} else if (sonicwave_flag == 0) {
			GPIOB->ODR |= GPIO_Pin_8;
			triggerflag[0]++;
			TIM7->CR1 &= ~TIM_CR1_CEN;
			//echo가 동작한계를 넘어설 때까지 도착하지 않으면 ...
			catcher_status[0] = 0;
			EXTI->FTSR &= ~EXTI_FTSR_TR10;
			EXTI->RTSR |= EXTI_RTSR_TR10;
			sonicwave_flag = 1;  //1
		} else if (sonicwave_flag == 1) {
			GPIOB->ODR |= GPIO_Pin_14;
			triggerflag[1]++;
			TIM7->CR1 &= ~TIM_CR1_CEN;
			//echo가 동작한계를 넘어설 때까지 도착하지 않으면 ...
			catcher_status[1] = 0;
			EXTI->FTSR &= ~EXTI_FTSR_TR11;
			EXTI->RTSR |= EXTI_RTSR_TR11;
			sonicwave_flag = 2;	//2
		} else if (sonicwave_flag == 3) {
			GPIOB->ODR |= GPIO_Pin_15;
			triggerflag[3]++;
			TIM7->CR1 &= ~TIM_CR1_CEN;
			//echo가 동작한계를 넘어설 때까지 도착하지 않으면 ...
			catcher_status[3] = 0;
			EXTI->FTSR &= ~EXTI_FTSR_TR13;
			EXTI->RTSR |= EXTI_RTSR_TR13;
			sonicwave_flag = 0;	//0
		}
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
	}
}
