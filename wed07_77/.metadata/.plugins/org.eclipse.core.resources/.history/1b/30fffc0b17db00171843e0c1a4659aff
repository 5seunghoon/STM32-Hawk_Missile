#include "misc.h"
#include "stm32f10x.h"
#include "stm32f10x_exti.h"
#include "stm32f10x_gpio.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_dma.h"
#include "stm32f10x_usart.h"
#include "stm32f10x_adc.h"
#include "lcd.h"
#include "Touch.h"
#include "stm32f10x_tim.h"
uint16_t pos_x,pos_y;
uint16_t pix_x,pix_y;

int motorTime = 0;
int motorTimePhrase = 100;
int sensorDegree[6] = {64,54,44,34,21,5};

int launchDegree = 140;
int launchInitDegree = 30;

vu32 ADCvalue[6];

int time = 0;

int timerStartFlag = 0;

int radarRotateFlag = 0;

int delayCounter = 0;
int delayFlag = 0;
int delayStart = 0;
static USART_InitTypeDef usart1_init_struct;
static GPIO_InitTypeDef gpioa_init_struct;
static EXTI_InitTypeDef EXTI_InitStructure;

NVIC_InitTypeDef NVIC_InitStructure;
GPIO_InitTypeDef GPIO_InitStructure;
USART_InitTypeDef USART_InitStructure;
TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

void launcherDegreeSet(int sensorNum);
void Sencing();
void Launch();
void USART1_Init(void) {
	//RCC -> APB2ENR |= (uint32_t)RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN  | RCC_APB2ENR_IOPDEN;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA, ENABLE);

	gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
	gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
	gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOA, &gpioa_init_struct);

	gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
	gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
	gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &gpioa_init_struct);

	USART_Cmd(USART1, ENABLE);
	usart1_init_struct.USART_BaudRate = 9600;
	usart1_init_struct.USART_WordLength = USART_WordLength_8b;
	usart1_init_struct.USART_StopBits = USART_StopBits_1;
	usart1_init_struct.USART_Parity = USART_Parity_No;
	usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_Init(USART1, &usart1_init_struct);
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
	NVIC_EnableIRQ(USART1_IRQn);
}
int degreeToPWM(int degree){
	degree -= 15;
	return (2300 - 700) / 180 * degree + 700;
}
void delay(int i){
	int j;
	for(j=0; j<=i * 100000; j++);
}

void changeLED(int num){
	if(num == 1) GPIOD->ODR ^= GPIO_Pin_2;
	else if(num == 2) GPIOD->ODR ^= GPIO_Pin_3;
	else if(num == 3) GPIOD->ODR ^= GPIO_Pin_4;
	else if(num == 4) GPIOD->ODR ^= GPIO_Pin_7;
}


void BUTTON_interrupt_Setting(void){
	//AFIO->EXTICR[3] |= AFIO_EXTICR3_EXTI11_PD;
	RCC_APB2PeriphClockCmd(RCC_APB2ENR_IOPDEN, ENABLE);

	//NVIC SETTING
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);

	NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

	NVIC_Init(&NVIC_InitStructure);

	//EXTI SETTING
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO, ENABLE);

	GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource11);
	EXTI_InitStructure.EXTI_Line = EXTI_Line11;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);

	GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource12);
	EXTI_InitStructure.EXTI_Line = EXTI_Line12;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);

}
void Bluetooth_USART2_Init(void){
	GPIO_InitTypeDef bluetooth_gpioa_init_struct;
	NVIC_InitTypeDef bluetooth_NVIC_InitStructure;
	USART_InitTypeDef bluetooth_usart2_init_struct;

	//CLOCK 설정
	//USART2는 RCC를 ABP1을 사용
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);


	//TX RX의 핀 설정
	//PA2 = TX, PA3 = RX (TX 보내는거, RX 받는거)
	bluetooth_gpioa_init_struct.GPIO_Pin = GPIO_Pin_2;
	bluetooth_gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
	bluetooth_gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOA, &bluetooth_gpioa_init_struct);

	bluetooth_gpioa_init_struct.GPIO_Pin = GPIO_Pin_3;
	bluetooth_gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
	bluetooth_gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &bluetooth_gpioa_init_struct);


	//USART2 설정
	bluetooth_usart2_init_struct.USART_BaudRate = 9600;
	bluetooth_usart2_init_struct.USART_WordLength = USART_WordLength_8b;
	bluetooth_usart2_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	bluetooth_usart2_init_struct.USART_Parity = USART_Parity_No;
	bluetooth_usart2_init_struct.USART_StopBits = USART_StopBits_1;
	bluetooth_usart2_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;

	USART_Init(USART2, &bluetooth_usart2_init_struct);
	USART_Cmd(USART2, ENABLE);
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);

	//인터럽트 설정
	bluetooth_NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
	bluetooth_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
	bluetooth_NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
	bluetooth_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&bluetooth_NVIC_InitStructure);

}
void EXTI15_10_IRQHandler(void) //10.11.12.
{
	if(EXTI_GetITStatus(EXTI_Line12) != RESET){
	    //SendDataMain();
	    //Send_String();
	    EXTI_ClearITPendingBit(EXTI_Line12);
    }
	if(EXTI_GetITStatus(EXTI_Line11) != RESET) {
		//동작수행구문
	    //waveLed();
	    EXTI_ClearITPendingBit(EXTI_Line11);
    }
}
void USART1_IRQHandler(void) {
    char buf;
    while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET) {}

    //USART1에서 받은 데이터를 USART2로 전송
    buf = (char) USART_ReceiveData(USART1);
    USART_SendData(USART2, buf);
    USART_ClearITPendingBit(USART1, USART_IT_RXNE);
}
void USART2_IRQHandler(void) {
	char data;
	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET) {}

    //USART2에서 받은 데이터를 USART1로 전송
	data = (char) USART_ReceiveData(USART2);
	USART_SendData(USART1, data);
	USART_ClearITPendingBit(USART2, USART_IT_RXNE);

}
void RCC_Config(void) {
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
}

void GPIO_Config(void) {
	GPIO_InitTypeDef GPIO_init;
	GPIO_init.GPIO_Pin = GPIO_Pin_5;
	GPIO_init.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_init);

	GPIO_init.GPIO_Pin = GPIO_Pin_6;
	GPIO_init.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_init);

	GPIO_init.GPIO_Pin = GPIO_Pin_7;
	GPIO_init.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_init);

	GPIO_init.GPIO_Pin = GPIO_Pin_1;
	GPIO_init.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_init);

	GPIO_init.GPIO_Pin = GPIO_Pin_1;
	GPIO_init.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_init);

	GPIO_init.GPIO_Pin = GPIO_Pin_1;
	GPIO_init.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_init);

	/*
	GPIO_init.GPIO_Pin = GPIO_Pin_3;
	GPIO_init.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_init);
	 */
	GPIO_init.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_init.GPIO_Pin = (GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_7);
	GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOD, &GPIO_init);
}

void NVIC_Config(void) {
	NVIC_InitTypeDef NVIC_init;
	NVIC_init.NVIC_IRQChannel = ADC1_2_IRQn;
	NVIC_init.NVIC_IRQChannelCmd = ENABLE;
	NVIC_init.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_init.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init(&NVIC_init);
}

void ADC_Config(void) {
	ADC_InitTypeDef ADC_init;

	// ADC1 parameter
	ADC_init.ADC_ContinuousConvMode = ENABLE;
	ADC_init.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_init.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
	ADC_init.ADC_Mode = ADC_Mode_Independent;
	ADC_init.ADC_NbrOfChannel = 6;
	ADC_init.ADC_ScanConvMode = ENABLE;
	ADC_Init(ADC1, &ADC_init);

	// ADC Channel Config
	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 1, ADC_SampleTime_239Cycles5);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 2, ADC_SampleTime_239Cycles5);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 3, ADC_SampleTime_239Cycles5);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 4, ADC_SampleTime_239Cycles5);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 5, ADC_SampleTime_239Cycles5);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 6, ADC_SampleTime_239Cycles5);
	//ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 2, ADC_SampleTime_239Cycles5);


	ADC_DMACmd(ADC1, ENABLE);
	ADC_Cmd(ADC1, ENABLE);
	//ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);

	// ADC Start
	ADC_ResetCalibration(ADC1);
	while(ADC_GetCalibrationStatus(ADC1));
	ADC_StartCalibration(ADC1);
	while(ADC_GetCalibrationStatus(ADC1));
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
}


void DMA_Channel_Config(void){
	DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Channel1);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &ADC1->DR;
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) ADCvalue;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
	DMA_InitStructure.DMA_BufferSize = 6;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
	DMA_Init(DMA1_Channel1, &DMA_InitStructure);

	DMA_Cmd(DMA1_Channel1, ENABLE);
}


void init_Timer2() {
  NVIC_InitTypeDef NVIC_InitStructure; // for interreupt
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure; // timerbase...

  /* TIM2 Clock Enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);

  /* Enable TIM2 Global Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  /* TIM2 Initialize */
  TIM_TimeBaseStructure.TIM_Period = 1200;
  TIM_TimeBaseStructure.TIM_Prescaler = 600;
  //계산방법 : 1/72mhz * 1200 * 60000
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);

  /* TIM2 Enale */
  TIM_ARRPreloadConfig(TIM2, ENABLE);
  TIM_Cmd(TIM2, ENABLE);
  TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); // interrupt enable
}


void printADCvalue(int size){
	int i = 0;
	float a = 0.0;
	for(i = 0 ; i < size ; i ++){
		a = ADCvalue[i];
		a = (67870.0 / (ADCvalue[i]-3.0));
		LCD_ShowNum(50, 100+i*20, a , 4, BLACK, WHITE);
	}
}

/*
void TIM1_UP_IRQHandler(void){ // 10Hz호출

	if(TIM_GetITStatus(TIM1,TIM_IT_Update) != RESET ){
		TIM_ClearFlag(TIM1,TIM_FLAG_Update);
		TIM_ClearITPendingBit(TIM1,TIM_IT_Update);
		motorTime ++;
		if(1){
			GPIOD->ODR ^= GPIO_Pin_4;
			GPIOD->ODR ^= GPIO_Pin_7;
			motorTime = 0;
		}
	}
}
*/
void TIM2_IRQHandler(void) {
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
	//Clears the TIMx's interrupt pending bits.

	if(timerStartFlag == 1){

		LCD_ShowNum(100, 200, timerStartFlag , 4, BLACK, WHITE);

		printADCvalue(6);

	  	motorTime ++;
	  	if(motorTime % 20 == 0){
	  		Sencing();
	  	}
		if(motorTime >= motorTimePhrase){
			motorTime = 0;
			changeLED(4);
		}
	}

	if(delayStart == 1){
		delayCounter++;
		if(delayCounter >= 300){
			delayFlag = 1;
			delayStart = 0;
		}
	}
}


void lightOn(){
	int i = 0;
	float a = 0.0;
	for(i = 0 ; i < 6 ; i ++){
		a = (67870.0 / (ADCvalue[i]-3.0));
		if( a < 30){
			int j = 0;
			for(j = 0 ; j < 4 ; j ++){
				changeLED(2);
				delay(10);
			}
			break;
		}
	}
}

void timerStart(){
	timerStartFlag = 1;

}

void RotateRadar(){
	if(radarRotateFlag == 0){
		radarRotateFlag = 1;
		changeLED(3);
	}
}
void StopRader(){
	if(radarRotateFlag == 1){
		radarRotateFlag = 0;
		changeLED(3);
	}
}
void Sencing(){
	int sensorNum = 0;
	int a = 0;
	for(sensorNum = 0 ; sensorNum < 6 ; sensorNum ++){
		a = (67870.0 / (ADCvalue[sensorNum]-3.0));
		if(a < 30){
			StopRader();
			launcherDegreeSet(sensorNum);
			Launch();
			changeLED(2);

			LCD_ShowNum(100, 150, a , 4, BLACK, WHITE);

			LCD_ShowNum(100, 180, sensorNum , 4, BLACK, WHITE);

			break;

		}
	}
	return;
}


void ButtonInputToRotate(){

	GPIO_InitTypeDef GPIO_init;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);

	GPIO_init.GPIO_Pin = GPIO_Pin_11;
	GPIO_init.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOD, &GPIO_init);

	while(1){
		if((GPIOD->IDR & GPIO_Pin_11)){

			delayStart = 1;

			while(1){
				if(delayFlag == 1){
					break;
				}
			}
			RotateRadar();

			launcherDegreeSet(2);

			timerStart();

			break;
		}
	}


}
void luncherDegreeInit(){
	launcherDegreeSet(6);
}
void PWM_Timer_Config(){
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	uint16_t PrescalerValue;


    /* TIM3 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

    /* GPIOA and GPIOB clock enable */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);

    /*GPIOB Configuration: TIM3 channel1, 2, 3 and 4 */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    GPIO_PinRemapConfig(GPIO_FullRemap_TIM3, ENABLE);



    TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable);
    TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
    TIM_ARRPreloadConfig(TIM3, ENABLE);
    TIM_Cmd(TIM3, ENABLE);
    PrescalerValue = (uint16_t) (SystemCoreClock / 1000000) - 1;
    TIM_TimeBaseStructure.TIM_Period = 20000-1;
    TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

}

void launcherDegreeSet(int sensorNum){
	int degree = sensorDegree[sensorNum - 1] + 20;
    TIM_OCInitTypeDef  TIM_OCInitStructure;

    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_Pulse = degreeToPWM(degree);
    TIM_OC2Init(TIM3, &TIM_OCInitStructure);

}
void luncherControlerDegreeInit(){
    TIM_OCInitTypeDef  TIM_OCInitStructure;

    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_Pulse = degreeToPWM(launchInitDegree);

    TIM_OC4Init(TIM3, &TIM_OCInitStructure);

}
void Launch(){
    TIM_OCInitTypeDef  TIM_OCInitStructure;

    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_Pulse =  degreeToPWM(launchDegree);

    TIM_OC4Init(TIM3, &TIM_OCInitStructure);

    timerStartFlag=0;
    delay(100);
    luncherControlerDegreeInit();


}
int color[12]={WHITE,CYAN,BLUE,RED,MAGENTA,LGRAY,GREEN,YELLOW,BROWN,BRRED,GRAY};
int main(){
	timerStartFlag=0;

	SystemInit();
	LCD_Init();
	//Touch_Configuration();
	//Touch_Adjust();
	//TIM_Init();
	//init_MoterTimer();
	LCD_Clear(WHITE);
	RCC_Config();
	GPIO_Config();
	NVIC_Config();
	ADC_Config();
	DMA_Channel_Config();

	PWM_Timer_Config();

	init_Timer2();

	USART1_Init();
	BUTTON_interrupt_Setting();
	Bluetooth_USART2_Init();
	changeLED(1);
	luncherDegreeInit();
	luncherControlerDegreeInit();

	ButtonInputToRotate();



	while(1){
		delay(10);
		LCD_ShowString(50, 50, "!WED 07!", BLACK, WHITE);
		//lightOn();
	}
}
